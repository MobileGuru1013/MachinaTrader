@using Globals
<!DOCTYPE html>

<!--
* MachinaTrader
* @@version v2.0.0
* @@link https://github.com/LORDofDOOM/MachinaTrader
* Copyright (c) 2018 Thiemo Borger
-->

<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
    <meta name="description" content="Crypto trading bot">
    <meta name="author" content="MachinaTrader Team">
    <meta name="keyword" content="Crypto, Cryptotrading, tradingbot">
    <title>MachinaTrader</title>
    <!-- Icons-->
    <link href="/css/fortawesome/css/fontawesome.css" rel="stylesheet" asp-append-version="true">
    <link href="/css/fortawesome/css/fa-regular.css" rel="stylesheet" asp-append-version="true">
    <link href="/css/fortawesome/css/fa-solid.css" rel="stylesheet" asp-append-version="true">
    <link href="/css/fortawesome/css/fa-light.css" rel="stylesheet" asp-append-version="true">
    <link href="/css/fortawesome/css/fa-brands.css" rel="stylesheet" asp-append-version="true">
    <link href="/vendors/@@mdi/font/css/materialdesignicons.min.css" rel="stylesheet" asp-append-version="true">
    @{
        if (Global.Configuration.SystemOptions.Theme == "dark")
        {
            <link href="/css/styledark.min.css" rel="stylesheet" asp-append-version="true">
        }
        else
        {
            <link href="/css/style.min.css" rel="stylesheet" asp-append-version="true">
        }
    }
    <link href="/css/machinacore-font/style.css" rel="stylesheet" asp-append-version="true">
    <style>
        .navbar a, .btn, button {
            -webkit-app-region: no-drag;
        }
    </style>
</head>

<body class="app header-fixed sidebar-fixed aside-menu-fixed sidebar-lg-show">

    <div id="wrapper">

        <div id="connectionError" style="display: none">
            <div id="connectionErrorInfo">
                <div style="text-align: center;">
                    <i class="far fa-sync" style="font-size: 100px;"></i>
                    <br>&nbsp;<h1>Server is offline<br> <span style="animation-duration: 2s" class="animated flash infinite">Reconnecting</span></h1>
                </div>
            </div>
        </div>

        <header class="app-header navbar" style="-webkit-app-region: drag">
            <button class="navbar-toggler sidebar-toggler d-lg-none mr-auto" type="button" data-toggle="sidebar-show">
                <span class="navbar-toggler-icon"></span>
            </button>
            <a class="navbar-brand" href="#">
                <i class="machinacore-icon-logo" style="color: #fff;font-size: 30px;"></i><span class="navbar-brand-full" style="margin-right: 5px; margin-left: 5px;color: #fff;font-size: 1.4rem;">&nbsp;<b>Machina</b>Trader</span>
            </a>
            <button class="navbar-toggler sidebar-toggler d-md-down-none" type="button" data-toggle="sidebar-lg-show">
                <i class="far fa-bars"></i>
            </button>
            <ul class="nav navbar-nav d-md-down-none">
                <li class="nav-item px-3">
                    <a class="nav-link" href="/">Dashboard</a>
                </li>
                <li class="nav-item px-3">
                    <a class="nav-link" href="#">Users</a>
                </li>
                <li class="nav-item px-3">
                    <a class="nav-link" href="#">Settings</a>
                </li>
            </ul>
            <ul class="nav navbar-nav ml-auto">
                <partial name="_UserNavHeader" />
            </ul>
            <button class="navbar-toggler aside-menu-toggler d-md-down-none" type="button" data-toggle="aside-menu-lg-show">
                <span class="navbar-toggler-icon"></span>
            </button>
            <button class="navbar-toggler aside-menu-toggler d-lg-none" type="button" data-toggle="aside-menu-show">
                <span class="navbar-toggler-icon"></span>
            </button>
            <button id="min-btn" type="button" class="navbar-toggler electronControl" style="display: none;" onclick="remote.getCurrentWindow().minimize();"><i class="mdi mdi-window-minimize" style="vertical-align: bottom;"></i></button>
            <button href="#" type="button" id="max-btn" class="navbar-toggler electronControl" style="display: none;" onclick="if (remote.getCurrentWindow().isMaximized()) {remote.getCurrentWindow().unmaximize()} else {remote.getCurrentWindow().maximize()};"><i class="mdi mdi-window-maximize"></i></button>
            <button href="#" type="button" id="close-btn" class="navbar-toggler electronControl" style="display: none;" onclick="remote.getCurrentWindow().close();"><i class="mdi mdi-window-close"></i></button>
        </header>
        <div class="app-body">
            <div class="sidebar">
                <partial name="_SidebarNavigation" />
            </div>
            <main class="main">
                <!-- Breadcrumb-->
                <ol class="breadcrumb" id="breadcrumb">
                    <li class="breadcrumb-item">Home</li>
                    <li class="breadcrumb-item">
                        <a href="#">Admin</a>
                    </li>
                    <li class="breadcrumb-item active">Dashboard</li>
                    <!-- Breadcrumb Menu-->
                    <li class="breadcrumb-menu d-md-down-none">
                        <div class="btn-group" role="group" aria-label="Button group">
                            <a class="btn" href="#">
                                <i class="fal fa-comment"></i>
                            </a>
                            <a class="btn" href="./">
                                <i class="fal fa-tachometer-alt"></i> Dashboard
                            </a>
                            <a class="btn" href="#">
                                <i class="fal fa-cog"></i> Settings
                            </a>
                        </div>
                    </li>
                </ol>
                <div class="container-fluid">
                    <div id="ui-view">@RenderBody()</div>
                </div>
            </main>
            <aside class="aside-menu">
                <partial name="_AsideMenu" />
            </aside>
        </div>
    </div>

    <!-- Bootstrap and necessary plugins-->
    <script>
        //Check for electron Plugins
        try {
            window.nodeRequire = require;
            //delete window.require;
            //delete window.exports;
            delete window.module;
        } catch (e) {
        };
    </script>
    <script src="/vendors/jquery/js/jquery.min.js" asp-append-version="true"></script>
    <script src="/vendors/jquery-ui-dist/js/jquery-ui.min.js" asp-append-version="true"></script>
    <script src="/vendors/axios/js/axios.min.js" asp-append-version="true"></script>
    <script src="/vendors/popper.js/js/popper.min.js" asp-append-version="true"></script>
    <script src="/vendors/bootstrap/js/bootstrap.min.js" asp-append-version="true"></script>
    <script src="/vendors/select2/js/select2.min.js" asp-append-version="true"></script>
    <script src="/vendors/@@aspnet/signalr/js/signalr.min.js" asp-append-version="true"></script>
    <script src="/vendors/perfect-scrollbar/js/perfect-scrollbar.min.js" asp-append-version="true"></script>
    <script src="/vendors/@@machinacore/machinacoreui/js/coreui.min.js" asp-append-version="true"></script>
    <script src="/vendors/vue/js/vue.min.js" asp-append-version="true"></script>
    <script src="/js/main.js" asp-append-version="true"></script>

    <script type="text/javascript">
        var isConnected = false;
        //Resolve conflict in jQuery UI tooltip with Bootstrap tooltip
        //$.widget.bridge('uibutton', $.ui.button);

        //Use Remote if in Electron
        try {
            var remote = require('electron').remote; var app = require('electron');
            $(document).ready(function () {
                $('.electronControl').show();
            });
        } catch (e) {
            console.log("Not running in MachinaTrader Interface (" + e + ")");
        };

        let hubRoute = "/signalr/HubMainIndex";
        let protocol = new signalR.JsonHubProtocol();
        var options = {};

        function aspLogout() {
            $('#logoutForm').submit();
        }

        var connectionMain = new signalR.HubConnectionBuilder()
            //.configureLogging(signalR.LogLevel.Trace)
            .withUrl(hubRoute, options)
            .withHubProtocol(protocol)
            .build();

        var reconnectSignalr = function () {
            if (!self.serverOnline) {
                connectionMain.start().then(function () {
                    vueMain.serverOnline = true;
                    $('#connectionError').css('display', 'none');
                    $('#signalrStatusSymbol').addClass('text-success').removeClass('text-danger');
                    $('#signalrStatusText').text('Online');
                }).catch(function (err) {
                    $('#connectionError').css('display', 'block');
                    $('#signalrStatusSymbol').addClass('text-danger').removeClass('text-success');
                    $('#signalrStatusText').text('Offline');
                    vueMain.serverOnline = false;
                    // restart connection after 5sec -> prevents timeout
                    // console.log('Connect Error:' + err);
                    setTimeout(function () {
                        console.log("reconnnect");
                        reconnectSignalr();
                    }, 5000);
                });
            }
        }

        connectionMain.on('Send', function (msg) {
            console.log(msg);
        });

        connectionMain.onclose(function (e) {
            if (e) {
                console.log('Connection closed with error: ' + e);
            }
            else {
                console.log('Disconnected');
            }
            //Reconnect -> This connection should never be offline
            reconnectSignalr();
        });

        reconnectSignalr();


        var vueMain = new Vue({
            el: '#wrapper',

            data: {
                runtimeSettings: null,
                serverOnline: false
            },

            created: function () {
                this.fetchData();
            },

            methods: {
                fetchData: function () {
                    var self = this;
                    $.get('/api/config/runtime', function (data) {
                        self.runtimeSettings = data;
                        console.log("ready");
                        self.$nextTick(function () {
                            $('#ui-view').ajaxLoad();
                        });
                    });
                }
            }
        });

    </script>
    @RenderSection("Scripts", required: false)

</body>
</html>

